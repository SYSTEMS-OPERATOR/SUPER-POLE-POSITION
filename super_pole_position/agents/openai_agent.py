from __future__ import annotations

import json
import os
from typing import Any

from .base_llm_agent import BaseLLMAgent, NullAgent


def parse_action(text: str) -> dict:
    """Parse ``text`` containing JSON into an action dict."""

    try:
        data = json.loads(text)
    except Exception:
        return {"throttle": 0, "brake": 0, "steer": 0.0}
    return {
        "throttle": int(data.get("throttle", 0)),
        "brake": int(data.get("brake", 0)),
        "steer": float(data.get("steer", 0.0)),
    }

try:
    import openai  # type: ignore
except Exception:  # pragma: no cover
    openai = None


class OpenAIAgent(BaseLLMAgent):
    """Agent that delegates decision-making to OpenAI API."""

    def __init__(self, model: str = "gpt-3.5-turbo") -> None:
        """Initialize the agent and check API availability."""

        self.model = model
        self._enabled = openai is not None and os.getenv("ALLOW_NET") == "1"

    def act(self, observation: Any) -> dict:
        """Return an action dictionary generated by the OpenAI API."""

        if not self._enabled:
            return NullAgent().act(observation)
        prompt = (
            f"Observation: {observation}. Return JSON with throttle, brake, steer."
        )
        resp = openai.chat.completions.create(
            model=self.model, messages=[{"role": "user", "content": prompt}]
        )
        content = resp.choices[0].message.content
        action = parse_action(content)
        if action == {"throttle": 0, "brake": 0, "steer": 0.0}:
            return NullAgent().act(observation)
        return action
