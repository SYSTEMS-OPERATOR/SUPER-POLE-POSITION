#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (c) 2025 MIND INTERFACES, INC. All rights reserved.
# Licensed under the MIT License.

"""
openai_agent.py
Description: Module for Super Pole Position.
"""


from __future__ import annotations

import json
import os
from typing import Any, Dict

from .base_llm_agent import BaseLLMAgent, NullAgent


def parse_action(text: str) -> Dict[str, float]:
    """Parse ``text`` containing JSON into an action dict."""

    # The API is expected to return JSON with ``throttle``, ``brake`` and
    # ``steer`` fields. We guard against any malformed responses.

    try:
        data = json.loads(text)
    except Exception:
        return {"throttle": 0.0, "brake": 0.0, "steer": 0.0}
    return {
        "throttle": float(data.get("throttle", 0)),
        "brake": float(data.get("brake", 0)),
        "steer": float(data.get("steer", 0.0)),
    }


# ``openai`` is an optional dependency. Import it lazily so the rest of the
# package works even when the library is not installed.
try:  # pragma: no cover - the import is environment-dependent
    import openai
except Exception:  # pragma: no cover - handled by falling back to ``None``
    openai = None



class OpenAIAgent(BaseLLMAgent):
    """Agent that delegates decision-making to the OpenAI API."""

    def __init__(self, model: str = "gpt-3.5-turbo") -> None:
        """Set up the client and check API availability."""

        self.model = model
        self._enabled = openai is not None and os.getenv("ALLOW_NET") == "1"
        if self._enabled:
            # ``openai`` 1.x exposes a client object but older versions expose
            # module-level functions.  We support both styles here.
            try:
                self.client = openai.OpenAI()
            except AttributeError:
                self.client = openai
        else:
            self.client = None

    def act(self, observation: Any) -> Dict[str, float]:
        """Return an action dictionary generated by the OpenAI API."""

        if not self._enabled or self.client is None:
            return NullAgent().act(observation)
        prompt = f"Observation: {observation}. Return JSON with throttle, brake, steer."
        # ``chat.completions.create`` is supported across openai versions.  We
        # rely on the ``client`` attribute set up in ``__init__``.
        try:
            resp = self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": prompt}],
            )
            content = resp.choices[0].message.content
            action = parse_action(content)
            if action == {"throttle": 0.0, "brake": 0.0, "steer": 0.0}:
                return NullAgent().act(observation)
            return action
        except Exception as exc:  # pragma: no cover - network failure
            print(f"OpenAIAgent error: {exc}", flush=True)
            return NullAgent().act(observation)
